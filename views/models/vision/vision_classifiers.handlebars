{{> header }}

<ul class="nav
          nav-tabs
          classifier__nav-tabs"
    id="classifier__tabs"
    role="tablist">

  <li class="nav-item classifier__nav-item ">
    <a class="nav-link classifier__nav-link active"
      id=""
      data-toggle="tab"
      href="#home"
      role="tab"
      aria-controls="home"
      aria-selected="true">
        <h2>
          <i class="fas fa-plus"></i>
          Create 
          Model
        </h2>
    </a>
  </li>

  <li class="nav-item classifier__nav-item--or">
    <h2>
      &mdash; or  &mdash;
    </h2>
  </li>

  <li class="nav-item classifier__nav-item">
    <a class="nav-link classifier__nav-link"
      id=""
      data-toggle="tab"
      href="#profile"
      role="tab"
      aria-controls="profile"
      aria-selected="false">
        <h2>
          <i class="fas fa-eye"></i>
          Explore Your
          Models
        </h2>
    </a>
  </li>
</ul>

<div class="tab-content " id="myTabContent" class="classifier__tabs">
  <div class="tab-pane classifier__tab fade show active"
      id="classifier__tab--create"
      role="tabpanel"
      aria-labelledby="home-tab">
    {{> vision__create }}
  </div>
{{!--
  <div class="tab-pane classifier__tab fade"
        id="classifier__tab--explore"
        role="tabpanel"
        aria-labelledby="profile-tab">
    {{> vision__explore }}
  </div> --}}

</div>

{{> footer }}

<!-- custom template for predict dropzone -->
<div id="dropzonePredictTemplate">
    <div class="dz-preview dz-file-preview">
      <div class="dz-details">
        <img data-dz-thumbnail />
        <div class='dz-filename'><span data-dz-name></span></div>
        <div class='dz-size' data-dz-size></div>
      </div>

      <div class="dz-progress">
        <span class="dz-upload" data-dz-uploadprogress></span>
        </div>

      <div class="dz-success-mark">
        <i class="fas fa-times"></i>
      </div>
      <div class="dz-error-mark">
        <i class="fas fa-check"></i>
        </div>
      <div class="dz-error-message"><span data-dz-errormessage></span></div>
    </div>
</div>

<script>
    $(function() {

    /// set up info icon toggles
    $('.js--open-help').on('click', function(e){
        const section = $(e.target).closest('.step__body');
        $(section).find('.step__help').toggle();
        event.preventDefault(); // to keep from scrolling
    });

      /// set up video embeds
    const player = new Plyr('#js-classifier__video--clarifai');

    // set up page tabs
    // Doesnt work? https://getbootstrap.com/docs/4.0/components/navs/#javascript-behavior
    $('#classifier__tabs a').on('click', function (e) {
      e.preventDefault()
      $(this).tab('show')
    })

    // set up dropzone instances
    // https://www.dropzonejs.com/#configuration
    // Dropzone.autoDiscover = false;

      /*
      Why doesnt this doesnt work?
      dropzoneCategories.on('error', function(file, errorMessage, xhr) {
        document.querySelector('.dropzone__error-container').innerHtml = errorMessage;
        console.log('error: ', errorMessage);
      });
      */

      const dropzonePredictEl = "#js--dropzone-predict";
      window.dropzonePredict = new Dropzone(dropzonePredictEl, {
          url: "/",
          paramName: "prediction-image",
          maxFiles: 1,
          dictRemoveFile: "",
          autoProcessQueue: false,
          uploadMultiple: false,
          acceptedFiles: ".jpg,.jpeg,.png",
          addRemoveLinks: true, //  enable person to del file
          thumbnailWidth: 80,
          thumbnailHeight: 80,
          previewsContainer: document.querySelector('.js--dropzone__previews-container--predict'),
          previewTemplate: document.querySelector('#dropzonePredictTemplate').innerHTML, // use a custom HTML template
          init: function () {
            this.on("error", function(file) {
              if (!file.accepted) {
                this.removeFile(file);
              }
            });
          }
      });
    });

    $(document).ready(function init() {

      window.labels = [];
      window.dropZoneMap = {};

      $('form').submit(false);

      $('#input_projectName').on('input', function () {
        if ($(this).val().length > 0) {
          window.projectName = $(this).val();
        }
      });

      $('.js--apikey__input').keypress((e) => {
          if (e.which == 13) {
              $('.js--apikey__input--set').trigger('click');
              e.preventDefault();
              return false;
          }
      });

      $('.js--apikey__input--set').click(function () {
        if ($('.js--apikey__input').val() == '') {
          alert('API Key cannot be empty');
          return;
        }
        window.apiKey = $('.js--apikey__input').val();
        // loadUserClassifiers();
      });

      $('#input_categoryName').keypress((e) => {
          if (e.which == 13) {
              $('#button_categoryName').trigger('click');
              e.preventDefault();
              return false;
          }
      });

      $('#button_categoryName').click(function () {
        if ($('#input_categoryName').val() == '') {
          alert('Category name cannot be empty');
          return;
        }

        // TODO: Sanitize categoryName before further processing
        var categoryName = $('#input_categoryName').val();
        if (window.labels.includes(categoryName)) {
          alert('Category already added');
          return;
        }
        window.labels.push(categoryName);
        createCategoryHTMLElement(categoryName);
        $('#input_categoryName').val('');
      });

      $('.js--train__button').on('click', function () {
          setTrainButtonState('training');
          preprocessTrainData();
      })

      $('.js--classifier__predict__button').on('click', function () {
          preprocessPredictData();
      })
    });

    function loadUserClassifiers() {
      $.ajax({
           url: "/vision/classifiers",
           type: "GET",
           headers: { 'apiKey': window.apiKey },
           success: function (data) {
             if(data.error == null) {
               window.userClassifiers = data.classifiers;
             } else {
               window.userClassifiers = [];
             }
             displayClassifiers();
           },
           error: function (data) {
             console.log(data);
             window.userClassifiers = [];
           }
        });
    }

    function createCategoryHTMLElement(categoryName) {
        const htmlStructure = `<div class="category__container
                                           js--dropzone__category__container--${categoryName}">
            <div class="category__box">
                <form action="/"
                       class="dropzone--categories
                              js--dropzone__category--${categoryName}">
                  <div class="category__name">
                        ${categoryName}
                    </div>

                    <div class="dropzone__header">
                        <i class="fas fa-cloud-upload-alt
                                    dropzone__upload-icon"></i>
                        <span class="dropzone__label">Drag and drop 10 or more images</span>
                    </div>

                    <!-- inject image previews here -->
                    <div class="js--dropzone__previews-container dropzone-previews"
                         id="js--dropzone__previews-container_${categoryName}">
                    </div>

                    <div class="dropzone__error-container"></div>
                </form>
            </div>

            <a href="#" class="category__button--remove
                               btn btn-primary
                               js--dropzone__category__remove--${categoryName}">
                <i class="fas fa-times"></i>
            </a>
        </div>`;
        const htmlElement = $(htmlStructure);
        const categoriesContainerElement = $('#categoriesContainer');
        categoriesContainerElement.append(htmlElement);
        initDropZoneForClass(categoryName);
    }

    function initDropZoneForClass(categoryName) {
      const dropzoneFormClass = `.js--dropzone__category--${categoryName}`;
      const dropzonePreviewsContainerClass = `.js--dropzone__previews__container--${categoryName}`;
      const dropzoneRemoveClass = `.js--dropzone__category__remove--${categoryName}`;
      const dropzoneCategoryInstance = new Dropzone(dropzoneFormClass, {
          url: "/file/post" ,
          paramName: "category-image",
          maxFilesize: 5, //  MB
          maxFiles: 20,
          autoProcessQueue: false,
          dictRemoveFile: "",
          acceptedFiles: ".jpg,.jpeg,.png",
          addRemoveLinks: true, //  enable person to del file
          thumbnailWidth: 80,
          thumbnailHeight: 80,
          previewsContainer: document.querySelector(dropzonePreviewsContainerClass),
          init: function () {
            this.on("error", function(file) {
              if (!file.accepted) {
                this.removeFile(file);
              }
            });
          }
      });
      $(dropzoneRemoveClass).click((e) => {
          e.preventDefault();
          removeDropZoneByClass(categoryName);
      });
      window.dropZoneMap[categoryName] = dropzoneCategoryInstance;
    }

    function removeDropZoneByClass(categoryName) {
        if (window.labels == undefined || !window.labels.includes(categoryName)) {
            return;
        }
        const dropZoneCategoryClass = `.js--dropzone__category__container--${categoryName}`;
        const dropzoneFormClass = `.js--dropzone__category--${categoryName}`;
        const dropzonePreviewsContainerClass = `.js--dropzone__previews__container--${categoryName}`;
        const dropzoneRemoveClass = `.js--dropzone__category__remove--${categoryName}`;
        window.dropZoneMap[categoryName].disable();
        delete window.dropZoneMap[categoryName];
        $(dropzoneRemoveClass).unbind();
        $(dropZoneCategoryClass).remove();
        delete window.labels[categoryName];
        if (window.examples != undefined && window.examples[categoryName] != undefined) {
            delete window.examples[categoryName];
        }
    }

    function setTrainButtonState(state) {
        if (state == 'normal') {
            $('.js--train__button').removeAttr('disabled');
            $('#span_train').removeClass('spinner-grow spinner-grow-sm');
            $('#span_train_status').html('Train');
        } else if (state == 'training') {
            $('.js--train__button').attr('disabled', '');
            $('#span_train').addClass('spinner-grow spinner-grow-sm');
            $('#span_train_status').html('Training');
        } else if (state == 'finished') {
            $('.js--train__button').removeAttr('disabled');
            $('#span_train').removeClass('spinner-grow spinner-grow-sm');
            $('#span_train_status').html('Done');
            $('.js--train__button').unbind();
        }
    }

    async function preprocessTrainData() {
        setTrainButtonState('training');
        try {
            validateTrainingData();
            var userClassifiers = await loadUserClassifiers();
            if (projectNameAlreadyUsed(userClassifiers)) {
              throw new Error('You have an existing project with the same name.');
              return;
            }
            await convertImagesIntoExamples();
            await createClassifier();
            setTrainButtonState('finished');
            setClassifierStatus();
            setAutoRefreshStatus(true);
        } catch (error) {
            console.log(error);
            setTrainButtonState('normal');
        }
    }

    function validateTrainingData() {
        // if (window.projectName === undefined || window.projectName.length < 2) {
        //     throw new Error("Project name is too short or empty");
        // }
        // if (window.apiKey === undefined || window.apiKey.length < 1) {
        //     throw new Error("API key not set");
        // }
        if (window.labels === undefined || window.labels.length < 2) {
            throw new Error("At least 2 classes are required");
        }
        for (const className of Object.keys(window.dropZoneMap)) {
            if (window.dropZoneMap[className].files === undefined || window.dropZoneMap[className].files.length < 10) {
                throw new Error(`${className} category has less than 10 examples`);
            }
        }
    }

    function loadUserClassifiers() {
        return new Promise((resolve, reject) => {
            $.ajax({
                 url: "/vision/classifiers",
                 type: "GET",
                 headers: { 'apiKey': window.apiKey },
                 success: function (data) {
                     if(data.error == null) {
                         resolve(data.classifiers);
                         return;
                     }
                     reject(new Error(data.error));
                 },
                 error: function (error) {
                     reject(error);
                 }
            });
        });
    }

    function projectNameAlreadyUsed(classifiers) {
        if (classifiers == undefined || classifiers.length == 0) return false;
        for (var index = 0; index < classifiers.length; index++) {
            var classifier = classifiers[index];
            if (classifier.name == window.projectName) return true;
        }
        return false;
    }

    async function convertImagesIntoExamples() {
        if(window.dropZoneMap.length < 1) {
            throw new Error("At least 2 classes are required");
        }
        for (const className of Object.keys(window.dropZoneMap)) {
            var promises = [];
            Array.from(window.dropZoneMap[className].files).forEach((file) => {
                if(file == undefined) return;
                var promise = new Promise((resolve, reject) => {
                    var reader = new FileReader();
                    reader.onloadend = function() {
                        resolve(reader.result);
                    }
                    reader.readAsDataURL(file);
                });
                promises.push(promise);
            });
            base64Images = await Promise.all(promises);
            try {
                setBase64Examples(className, base64Images);
            } catch (e) {
                throw e;
            }
        }
    }

    function setBase64Examples(className, examples) {
        if (window.examples == undefined) {
            window.examples = {};
        }
        window.examples[className] = examples;
    }

    function createClassifier() {
        var requestData = {};
        requestData.name = window.projectName;
        requestData.training_data = [];
        window.labels.forEach((label) => {
            label_items = [];
            window.examples[label].forEach((example) => {
                var image_file = example.split(',')[1];
                label_items.push(image_file);
            });
            requestData.training_data.push({label: label, label_items: label_items});
        })
        return new Promise((resolve, reject) => {
            $.ajax({
                url: '/vision/classifier',
                type: 'POST',
                dataType: 'json',
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify(requestData),
                headers: { apikey: window.apiKey },
                success: function (data) {
                    if(data.error != null) {
                        alert(data.error);
                        reject(new Error(data.error));
                        return;
                    }
                    window.model_id = data.classifier_id;
                    window.classifier_status = data.status;
                    resolve();
                },
                error: function (error) {
                    reject(error);
                }
            });
        });
    }

    function setClassifierStatus() {
        const classifierNameClass = ".js--classifier__name";
        const classifierStatusClass = ".js--classifier__status";
        const classifierRefreshSpinnerClass = ".js--classifier__status_spinner";
        $(`${classifierNameClass}--set`).html(window.model_id);
        $(`${classifierStatusClass}--set`).html(window.classifier_status);
        $(classifierNameClass).show();
        $(classifierStatusClass).show();
        if (window.classifier_status.includes('successfully')) {
            $(classifierRefreshSpinnerClass).hide();
            setAutoRefreshStatus(false);
        } else {
            $(classifierRefreshSpinnerClass).show();
        }
    }

    function setAutoRefreshStatus(autoRefresh) {
        if (!autoRefresh) {
            if (window.autoRefreshTimer != undefined) {
                clearInterval(window.autoRefreshTimer);
                window.autoRefreshTimer = undefined;
            }
        } else {
            window.autoRefreshTimer = setInterval(() => {
                loadUserClassifier(window.model_id);
            }, 2000);
        }
    }

    function loadUserClassifier(classifier_id) {
        $.ajax({
             url: "/vision/classifier",
             type: "GET",
             headers: { 'apikey': window.apiKey },
             data: { classifier_id: classifier_id},
             success: function (data) {
                 if(data.error == null) {
                      window.classifier_status = data.status;
                 } else {
                      alert(data.error);
                 }
                 setClassifierStatus();
             },
             error: function (error) {
                 console.log(error);
             }
          });
    }

    async function preprocessPredictData() {
        try {
            validatePredictionData();
            await loadPredictionImage();
            classify();
        } catch (error) {
            console.log(error);
            alert(error);
        }
    }

    function validatePredictionData() {
        if (window.dropzonePredict.files === undefined || window.dropzonePredict.files.length != 1) {
            throw new Error('No image selected to perform classification');
        }
    }

    function loadPredictionImage() {
        var promise = new Promise((resolve, reject) => {
            var reader = new FileReader();
            reader.onloadend = function() {
                window.predictionImage = reader.result;
                resolve(reader.result);
            }
            reader.readAsDataURL(window.dropzonePredict.files[0]);
        });
        return promise;
    }

    function classify() {
        if(window.predictionImage == undefined) {
          alert('No prediction image set');
          return;
        }
        $.ajax({
             url: "/vision/classify",
             type: "POST",
             headers: { 'apikey': window.apiKey },
             data: { classifier_id: window.model_id,
             image_data: window.predictionImage },
             success: function (data) {
                 if(data.error == null) {
                    showClassification(data);
                 } else {
                    alert(data.error);
                 }
             },
             error: function (error) {
                 console.log(error);
                 alert(error);
             }
        });
        window.dropzonePredict.removeAllFiles();
    }


    function showClassification(response) {
        if(response.length == 1) {
            alert(`${response[0].class} with confidence ${response[0].score}`)
        } else {
            var classes = {}
            var scores = []
            for(var idx = 0; idx < response.length; idx++) {
                let score = response[idx].score
                let className = response[idx].class
                classes[score] = className
                scores.push(score)
            }
            scores.sort(function(a, b) {
                return b - a;
            })
            let score = scores[0]
            let className = classes[score]
            alert(`${className} with confidence ${score}`)
        }
    }

</script>
